name: Deploy to S3 and Invalidate CloudFront

on:
  push:
    branches:
      - main  # Change this to your default branch if it's not 'main'

env:
  TF_VERSION: '1.5.0'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'  # Specify the Node.js version you need

      - name: Install Dependencies
        run: |
          npm install
        working-directory: ./website  

      - name: Build React App
        run: |
          npm run build
        working-directory: ./website  # Change to your React app directory

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure the build job completes before deploying
    environment: prod
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This allows the workflow to read the repository contents
      packages: read    # This allows the workflow to read packages
      actions: read     # This allows the workflow to read actions

    steps:
        - uses: actions/checkout@v3
  
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            role-to-assume: arn:aws:iam::222634359784:role/GitHubActionsRole  
            aws-region: ${{ secrets.AWS_REGION }}
  
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: ${{ env.TF_VERSION }}
       
        - name: Terraform Init
          run: |
            terraform init
          working-directory: ./terraform/env/prod

        - name: Terraform Plan
          run: |
            terraform plan
          working-directory: ./terraform/env/prod 

        - name: Terraform Apply
          run: |
            terraform apply -auto-approve
          working-directory: ./terraform/env/prod 
          
        - name: Sync Files to S3
          run: |
            aws s3 sync ./website/build s3://${{ secrets.S3_BUCKET_NAME }} --delete
          env:
            AWS_REGION: ${{ secrets.AWS_REGION }}

        - name: Invalidate CloudFront Distribution
          run: |
            aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
          env:
            AWS_REGION: ${{ secrets.AWS_REGION }}
